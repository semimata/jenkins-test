pipeline{
    agent none

    stages{
        stage('build'){
            agent{
                docker{
                    image: 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                 }
            }
            when{
                 changeset "**/worker/**"
            }
            steps{
                echo 'compiling worker app'
                dir('worker'){
                    sh 'mvn compile'
                }
            }
        }
         stage('test'){
            agent{
                docker{
                    image: 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                 }
            }

            when{
                 changeset "**/worker/**"
            }
            steps{
                echo 'Running Unit Test on worker app'
                dir('worker'){
                   sh 'mvn clean test'
                }
            }
        }
         stage('package'){
            agent{
                docker{
                    image: 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                 }
            }

            when{
                 branch 'master'
                 changeset "**/worker/**"
            }
            steps{
                echo 'packaging worker app'
                 dir('worker'){
                   sh 'mvn package -DskipTests'
                   archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true

                }
            }
        }
        stage('docker-package'){
            agent any
            when{
                 branch 'master'
                 changeset "**/worker/**"
            }
            steps{
                echo 'packaging worker app with docker'
                script{
                    docker.withRegistry('https://index.docker.io/v1', 'dockerlogin') {
                         def workerImage = docker.build("semimatadocker/workerbuild:v:${env.BUILD_ID}", "./worker")
                         workerImage.push()
                         workerImage.push("${env.BRANCH_NAME}")
                    }

                }
            }
        }

    }
    
    post{
        always{
             echo 'Pipeline for worker is completed'
        }
        failure{
            slackSend (channel: "continus-delivery", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        } 
        success{
            slackSend (channel: "continus-delivery", message: "Build Sucess - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}